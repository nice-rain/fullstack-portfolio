{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","localImage","setLocalImage","imageInput","useRef","predictions","setPredictions","category","setCategory","accuracy","setAccuracy","canSubmit","setCanSubmit","labels","getTextClass","postImage","base64","params","endpointRegion","endpointName","base64Image","fetch","method","body","JSON","stringify","then","response","json","data","results","highestIndex","highestPercent","i","length","labelIndex","percent","findHighestCategory","prediction","handleResponseData","catch","err","console","log","className","src","type","id","accept","ref","onChange","e","file","current","files","indexOf","reader","FileReader","addEventListener","event","target","result","readAsDataURL","onClick","preventDefault","onload","toString","replace","onerror","error","map","index","key","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4f44274a.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [localImage, setLocalImage] = useState('');\n  const imageInput = useRef(null);\n  const [predictions, setPredictions] = useState([]);\n  const [category, setCategory] = useState('');\n  const [accuracy, setAccuracy] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  const labels = [\n    'Early Blight',\n    'Leaf Miner',\n    'Powdery Mildew',\n    'Septoria Leaf Spot'\n  ]\n\n  const handleFileChange = e =>{\n    const file = imageInput.current.files[0];\n\n    if(!file)\n    {\n      setLocalImage('');\n      setAccuracy('');\n      setCanSubmit(false);\n      return;\n    }\n\n    if (file && file.type && file.type.indexOf('image') === -1) {\n      console.log('File is not an image.', file.type, file);\n      return;\n    }\n  \n    const reader = new FileReader();\n    reader.addEventListener('load', (event) => {\n      setLocalImage(event.target.result)\n    });\n    reader.readAsDataURL(file);\n\n    setCanSubmit(true);\n  }\n\n  //Determine which of our categories are the largest\n  const findHighestCategory = (results) =>{\n\n    let highestIndex = 0;\n    let highestPercent = results[0] *100;\n    \n    for(let i = 1; i < results.length; i++){\n      if(results[i] > results[highestIndex]){\n        //update highest index if our results are highest\n        highestIndex = i;\n        highestPercent = results[i] * 100;\n      }\n    }\n\n    return {labelIndex: highestIndex, percent: highestPercent};\n  }\n\n  const getBorderClass = () => {\n    \n    //Default\n    if(!accuracy){\n      return '';\n    }\n    \n    //Above 80\n    if(accuracy >= 80){\n      return 'green-border'\n    }\n    else if(accuracy > 50 && accuracy < 80)\n    {\n      return 'yellow-border'\n    }\n    else if(accuracy <= 50){\n      return 'red-border'\n    }\n  }\n\n  const getTextClass = () =>{\n    //Default\n    if(!accuracy){\n      return '';\n    }\n    \n    //Above 80\n    if(accuracy >= 80){\n      return 'green-text'\n    }\n    else if(accuracy > 50 && accuracy < 80)\n    {\n      return 'yellow-text'\n    }\n    else if(accuracy <= 50){\n      return 'red-text'\n    }\n  }\n\n  const handleResponseData = data =>{\n    // const labelIndex = findHighestCategory(data.prediction);\n\n    const {labelIndex, percent} = findHighestCategory(data.prediction);\n\n    setCategory(labels[labelIndex]);\n    setAccuracy(percent);\n    setPredictions(data.prediction);\n  }\n\n  const postImage = (base64) =>{\n    const params={\n      endpointRegion: 'us-east-1',\n      endpointName: 'IC-tomato-1594821424',\n      base64Image: base64\n    }\n    //console.log(params);\n\n    fetch('https://api.nicera.in/tomato', {\n      method: 'post',\n      body: JSON.stringify(params)\n    }).then(function(response) {\n        return response.json();\n    }).then(function(data) {\n        handleResponseData(data);\n    })\n    .catch(err =>{\n      console.log(err);\n    });\n  }\n\n  const submitImage = (e) =>{\n    e.preventDefault();\n    console.log('submitting image to API');\n    setCanSubmit(false);\n\n    var reader = new FileReader();\n    reader.readAsDataURL(imageInput.current.files[0]);\n    reader.onload = function () {\n      //console.log(reader.result);\n      postImage(reader.result.toString().replace(/^data:(.*,)?/, ''));\n    };\n    reader.onerror = function (error) {\n      console.log('Error: ', error);\n      setCanSubmit(true);\n    };\n\n    \n  }\n\n  const generatePredictionData = () =>{\n    if(predictions.length)\n    {\n\n      return predictions.map((prediction, index) =>{\n\n        let percent = prediction * 100;\n\n        return (\n        <tr key={`prediction_${index}`}>\n          <td>{labels[index]}</td><td>{percent.toFixed(3)}%</td></tr>\n        );\n      });\n    }\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tomato Leaf Disease Identification</h1>\n      </header>\n      <main className=\"container\">\n      <section>\n        <p>This application is a proof of concept using a machine learning model (AWS Sagemaker) to predict which disease a tomato leaf contains. It was built over a weekend with a very small data set (~10 images per disease). Because of this, the application has the follow caveats:</p>\n        <ul>\n          <li>Images must be .jpg format</li>\n          <li>Images need to be 200x200 for the most accurate results</li>\n          <li>Images must be one of the follow diseases: \n            <ul>\n              <li>Early Blight</li>\n              <li>Septoria Leaf Spot</li>\n              <li>Powdery Mildew</li>\n              <li>Leaf Miner</li>\n            </ul>\n          </li>\n        </ul>\n        </section>\n      <section className=\"App-container\">\n        <p>\n          <strong>Please select a photo below to get started:</strong>\n        </p>\n        <img src={localImage} className={`plant-image ${getBorderClass()}`}/>\n        <form>\n          <input type=\"file\" id=\"file-selector\" accept=\".jpg\" ref={imageInput} onChange={handleFileChange} />\n          \n          {canSubmit &&\n            <button onClick={submitImage}>Submit For Evaluation</button>\n          }   \n        </form>\n\n        {/* Prediction */}\n        {category &&\n          <h2>The disease is most likely <span className={getTextClass()}>{category}</span></h2>\n        }\n\n        {category && accuracy <=50 &&\n          <p className={getTextClass()}>The accuracy of this prediction is very low. Try using a different photo.</p>\n        }\n\n        <div>\n          <h3>Prediction Data:</h3>\n          <table>\n            <tbody>{generatePredictionData()}</tbody>\n          </table>\n        </div> \n        </section>\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}