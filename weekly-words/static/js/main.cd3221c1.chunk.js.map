{"version":3,"sources":["actions/index.js","reducers/index.js","store.js","components/header.js","components/deck.js","components/deckList.js","components/cardFront.js","components/cardBack.js","components/results.js","components/login.js","components/loading.js","formValidation.js","components/register.js","components/registerSuccess.js","components/info.js","components/mainContent.js","components/footer.js","components/weeklyWords.js","serviceWorker.js","index.js","config.js"],"names":["API_BASE_URL","require","showHideDeckInfo","index","type","startReview","flipCard","cardIndex","handleNav","navText","rightAnswer","wrongAnswer","goRegister","goLogin","displayHelp","hideHelp","doLogin","values","dispatch","fetch","concat","headers","content-type","body","JSON","stringify","method","then","res","ok","json","Promise","reject","sessionStorage","setItem","authToken","e","catch","err","loginError","doRegister","code","registerError","getDecks","Authorization","getItem","decks","map","deck","Object","objectSpread","displayInfo","getDecksSuccess","getDecksError","putDeckStats","stats","id","putDecksError","initialState","title","deckError","showNav","loading","reviewError","showHelp","page","review","deckIndex","shuffledCardIndices","startTime","cardCounter","currentCard","endTime","shuffleDeck","state","min","max","numCards","generatedDeck","cards","length","tempIndices","toConsumableArray","Array","keys","shuffledIndices","i","randomIndex","Math","floor","random","splice","createStore","combineReducers","weeklyWordsReducer","errorStatus","arguments","undefined","action","assign","Date","now","shuffledCards","slice","nextPage","newCardIndex","status","message","toLowerCase","form","formReducer","applyMiddleware","thunk","Header","props","react_default","a","createElement","className","role","onClick","defaultProps","connect","Deck","deckName","deckReviewTotal","deckLatestAccuracy","deckLatestTime","deckHighestAccuracy","deckFastestTime","DeckList","_Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","deckComponents","_this","reverse","src_components_deck","error","Component","currentDeck","word","CardBack","partOfSpeech","definition","usage","class","results","Results","_getPrototypeOf2","_len","args","_key","call","deckStats","seconds","toFixed","time","totalMinutes","totalSeconds","oldAccuracy","newAccuracy","calculateAccuracy","bestAccuracy","oldTime","fastestTime","_this2","calculateElapsedTime","clickedAgain","clickedHome","connection","errorField","onSubmit","handleSubmit","htmlFor","Field","name","component","required","reduxForm","Loading","dist_default","fadeIn","passwordsMustMatch","allValues","password","_ref","input","label","_ref$meta","meta","touched","warning","placeholder","validate","centered","textAlign","style","components_info","components_deckList","components_cardFront","components_cardBack","components_results","components_login","components_register","components_registerSuccess","Footer","text","WeeklyWords","components_header","components_mainContent","components_footer","Boolean","window","location","hostname","match","ReactDOM","render","es","store","components_weeklyWords","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","PORT","process","REACT_APP_API_BASE_URL"],"mappings":"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","file":"static/js/main.cd3221c1.chunk.js","sourcesContent":["//Our base API URL\n//const BASE_API_URL = 'https://fullstack-dev.pro/ww/api'\n\nconst {API_BASE_URL} = require('../config');\n\n//Called when we click on a deck button\nexport const SHOW_HIDE_DECK_INFO = 'SHOW_HIDE_DECK_INFO';\nexport const showHideDeckInfo = index =>({\n    type: SHOW_HIDE_DECK_INFO,\n    index\n});\n\n//Called when we click Start Review button on a single deck\n//Index refers to the deck's index that we are going to review\nexport const START_REVIEW = 'START_REVIEW';\nexport const startReview = index => ({\n    type: START_REVIEW,\n    index\n});\n\n//Called when we click the 'flip button on the card front\n//Card index is the index of the card in the review\nexport const FLIP_CARD = 'FLIP_CARD';\nexport const flipCard = cardIndex => ({\n    type: FLIP_CARD,\n    cardIndex\n});\n\nexport const HANDLE_NAV = 'HANDLE_NAV';\nexport const handleNav = (navText) =>({type: HANDLE_NAV, navText}); \n\n//Called when we click the check (correct) button on card back\nexport const RIGHT_ANSWER = 'RIGHT_ANSWER';\nexport const rightAnswer = ()=>({type: RIGHT_ANSWER});\n\n//Called when we click the x (incorrect) button on the card back\nexport const WRONG_ANSWER = 'WRONG_ANSWER';\nexport const wrongAnswer = ()=> ({type: WRONG_ANSWER});\n\n//Called when we click the 'home' button on the results page\nexport const RETURN_HOME = 'RETURN_HOME';\nexport const returnHome = ()=>({type: RETURN_HOME});\n\n//Called from login page to change us to registration\nexport const GO_REGISTER = 'GO_REGISTER';\nexport const goRegister = () =>({type: GO_REGISTER});\n\n//Called from login page to change us to registration\nexport const GO_LOGIN = 'GO_LOGIN';\nexport const goLogin = () =>({type: GO_LOGIN});\n\n//Shows help screen\nexport const DISPLAY_HELP = 'DISPLAY_HELP';\nexport const displayHelp = () =>({type: DISPLAY_HELP});\n\n//Hides help screen\nexport const HIDE_HELP = 'HIDE_HELP';\nexport const hideHelp = () =>({type: HIDE_HELP});\n\n//=======================================================\n// REQUEST, SUCCESS, FAIL for REST API\n//=======================================================\n\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const loginRequest = () => ({type: LOGIN_REQUEST});\n\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const loginSuccess = () => ({type: LOGIN_SUCCESS});\n\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const loginError = (err) => ({type: LOGIN_ERROR, err});\n\n\nexport const REGISTER_REQUEST = 'REGISTER_REQUEST';\nexport const registerRequest = () => ({type: REGISTER_REQUEST});\n\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const registerSuccess = () => ({type: REGISTER_SUCCESS});\n\nexport const REGISTER_ERROR = 'REGISTER_ERROR';\nexport const registerError = (err) => ({type: REGISTER_ERROR, err});\n\n\nexport const GET_DECKS_REQUEST = 'GET_DECKS_REQUEST';\nexport const getDecksRequest = () => ({type: GET_DECKS_REQUEST});\n\nexport const GET_DECKS_SUCCESS = 'GET_DECKS_SUCCESS';\nexport const getDecksSuccess = (decks) => ({type: GET_DECKS_SUCCESS, decks});\n\nexport const GET_DECKS_ERROR = 'GET_DECKS_ERROR';\nexport const getDecksError = (err) => ({type: GET_DECKS_ERROR, err});\n\n//Use this to update stats before we call the put request.\nexport const PUT_DECKS_REQUEST = 'PUT_DECKS_REQUEST';\nexport const putDecksRequest = () => ({type: PUT_DECKS_REQUEST});\n\nexport const PUT_DECKS_SUCCESS = 'PUT_DECKS_SUCCESS';\nexport const putDecksSuccess = () => ({type: PUT_DECKS_SUCCESS});\n\nexport const PUT_DECKS_ERROR = 'PUT_DECKS_ERROR';\nexport const putDecksError = (err) => ({type: PUT_DECKS_ERROR, err});\n\n//=======================================================\n// Redux Thunk Actions\n//=======================================================\nexport const doLogin = (values) => dispatch => {\n    //console.log('login fired');\n    //Show our loading for our login\n    dispatch(loginRequest());\n\n    //Send our AJAX request\n    return fetch(`${API_BASE_URL}/auth/login`, {\n            \"headers\":{\n                \"content-type\":\"application/json\"\n            },\n            \"body\":JSON.stringify(values),\n            \"method\":\"POST\"\n        }).then(res => {\n        if (!res.ok) {\n            return Promise.reject(res);\n        }\n        return res.json();\n    }).then(res => {\n        //console.log('Ajax success');\n\n        //Store it in sessionstorage (for now). No need to load persistence.\n        try {\n            sessionStorage.setItem('authToken', res.authToken);\n        } catch (e) {\n            //console.log('unable to set auth token');\n        }\n\n        //Notifies our application to switch to Decks page.\n        dispatch(loginSuccess());\n\n    }).catch(err => {\n        //console.log(err);\n        //Throw an error\n        dispatch(loginError(err));\n    });\n};\n\n//Register a new user\nexport const doRegister = (values) => dispatch => {\n    //console.log('register fired');\n    //console.log(values);\n\n    //Show our loading for our login\n    dispatch(registerRequest());\n\n    //Set Timeout to test loading\n    //setTimeout(() => {\n\n    //Send our AJAX request\n    return fetch(`${API_BASE_URL}/users`, {\n            \"headers\":{\n                \"content-type\":\"application/json\"\n            },\n            \"body\":JSON.stringify(values),\n            \"method\":\"POST\"\n        }).then(res => {\n        // if (!res.ok) {\n        //     return Promise.reject(res.json());\n        // }\n        return res.json();\n    }).then(res => {\n\n        if(res.code)\n        {\n            return Promise.reject(res);  \n        }\n        //console.log('Registration success');\n        //Notifies our application to switch to Decks page.\n        dispatch(registerSuccess());\n\n    }).catch(err => {\n        dispatch(registerError(err));\n    });\n\n\n    //End of loading timeout\n    //}, 1000);\n\n};\n\n//Action for GET request for all decks.\nexport const getDecks = () => dispatch => {\n    dispatch(getDecksRequest());\n\n    return fetch(`${API_BASE_URL}/decks/`,\n    {\n        'headers':{\n            'content-type':'application/json',\n            'Authorization':`Bearer ${sessionStorage.getItem('authToken')}`\n        },\n        'method':'GET'\n    })\n    .then(res => {\n        if (!res.ok) {\n            return Promise.reject(res);\n        }\n        return res.json();\n    })\n    .then(res => {\n        //console.log('GET Decks success');\n\n        const decks = res.map(deck =>{\n            return {...deck, displayInfo:false};\n        });\n\n        //Notifies our application to switch to Decks page.\n        dispatch(getDecksSuccess(decks));\n\n    })\n    .catch(err => {\n        //console.log(err);\n        //Throw an error\n        dispatch(getDecksError(err));\n    });\n};\n\nexport const putDeckStats = (stats) => dispatch =>\n{\n    dispatch(putDecksRequest());\n\n    const request = JSON.stringify(stats);\n    //console.log(request);\n\n    return fetch(`${API_BASE_URL}/decks/${stats.id}`,\n    {\n        'headers':{\n            'content-type':'application/json',\n            'Authorization':`Bearer ${sessionStorage.getItem('authToken')}`\n        },\n        'body':JSON.stringify(stats),\n        'method':'PUT'\n    })\n    .then(res => {\n        if (!res.ok) {\n            //console.log(res);\n            return Promise.reject(res);\n        }\n        return res;\n    })\n    .then(res => {\n        //console.log('PUT Decks success');\n        //Notifies our application to switch to Decks page.\n        dispatch(putDecksSuccess());\n\n    })\n    .catch(err => {\n        //console.log(err);\n        //Throw an error\n        dispatch(putDecksError(err));\n    });\n\n}","import * as actions from '../actions';\n\n//Initial test state (deck data is simulated for now)\nconst initialState = {\n    decks: [],\n    title: 'Weekly Words',\n    navText:null,\n    loginError: null,\n    deckError:false, //This error occurs when our GET fails\n    registerError:null,\n    showNav: false,\n    loading:false,\n    reviewError: false, //this error occurs when our PUT fails\n    showHelp:true,\n    page: 'login',\n    review: {\n        deckIndex: 0, //Index of deck being reviewed\n        shuffledCardIndices: [3,4,1,2,0],\n        startTime: 0, //Time we began review\n        cardCounter: 0, //Total number of times we've clicked flip\n        currentCard: 0, //Index of current card within deck\n        endTime:0\n    }\n};\n\n/**\n * Returns a random number within the given range\n * @param {number} min Minimum number in range\n * @param {number} max Maximum number in range\n */\nfunction randRange(min, max)\n{\n    //console.log(`Minimum is: ${min}`);\n    //console.log(`Maximum is ${max}`)\n\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n/**\n * Function randomizes the indices within our deck for review\n * @param {state} state State passed from reducer (immutable)\n * @param {Number} deckIndex Index of deck that we are reviewing.\n * @return {Array} returns array of indices to review.\n */\nfunction shuffleDeck(state, deckIndex)\n{\n    const numCards = state.decks[deckIndex].generatedDeck.cards.length;\n\n    //Store all empty keys in our shuffledCard array\n    const tempIndices = [...Array(numCards).keys()];\n    \n    //Array containing shuffled card indices\n    const shuffledIndices = [];\n\n    //Log our temporary indices (before shuffling)\n    //console.log(tempIndices);\n\n    //loop through each card index\n    for (let i = 0; i < numCards; i++)\n    {\n        //get a random number from 0 to our final index\n        let randomIndex = randRange(0, tempIndices.length);\n        // console.log(`Index in temporary array is ${randomIndex}`);\n        // console.log(`This gives us a shuffled index value of ${tempIndices[randomIndex]}`)\n\n        //Add it to our shuffled indices\n        shuffledIndices[tempIndices[randomIndex]] = i;\n\n        //Remove the random index from the tempIndices array (and resize it)\n        tempIndices.splice(randomIndex, 1);\n\n        //log after splice\n        //console.log(tempIndices);\n    }\n\n    //Log our shuffled indices\n    //console.log(shuffledIndices);\n\n    //Return our shuffled indices to our reducer\n    return shuffledIndices;\n}\n\nexport const weeklyWordsReducer = (state = initialState, action) =>{\n\n    if(action.type === actions.SHOW_HIDE_DECK_INFO)\n    {\n        //console.log('action = ShowHideDeck');\n\n        //Map our deck array, if the index matches, modify it\n        const decks = state.decks.map((deck, index) =>{\n            if(index === action.index)\n            {\n                deck.displayInfo = !deck.displayInfo;\n            }\n            return deck;\n        });\n        return Object.assign({}, state, {decks}); \n    }\n\n    else if(action.type === actions.START_REVIEW)\n    {\n        //console.log('action = startReview');\n        return Object.assign({}, state, {\n            page:'cardFront',\n            title:'Front',\n            navText:'End',\n            showNav:true,\n            review:{\n                shuffledCardIndices: shuffleDeck(state, action.index),\n                startTime: Date.now(),\n                deckIndex: action.index,\n                cardCounter:0,\n                currentCard:0,\n                endTime:0\n            }\n        });\n    }\n\n    else if(action.type === actions.FLIP_CARD)\n    {\n        //console.log('action = flipCard');\n        return Object.assign({}, state, {\n            page: 'cardBack',\n            title:'Back',\n            navText:'End',\n            showNav:true\n        });\n    }\n\n    else if(action.type === actions.RIGHT_ANSWER)\n    {\n        //console.log('action = rightAnswer');\n        \n        //We will need to start by removing our current index from the shuffledIndices array\n        const shuffledCards = [...state.review.shuffledCardIndices.slice(0, state.review.currentCard),\n            ...state.review.shuffledCardIndices.slice(state.review.currentCard + 1)];\n\n        const nextPage = {};\n\n        //Determine if we keep or change the index \n        //(should restart from front card once we miss a few)\n        let newCardIndex = state.review.currentCard;\n        if(newCardIndex >= shuffledCards.length)\n        {\n            newCardIndex = 0;\n        }\n\n        //Now we need to determine if we flip to the front or if we show results\n        //If we have no cards left, show results\n        if(shuffledCards.length <= 0)\n        {\n            nextPage.page = 'results';\n            nextPage.title = 'Results';\n            nextPage.navText = 'Done';\n            nextPage.showNav = false;\n        }\n        else{\n            nextPage.page = 'cardFront';\n            nextPage.title = 'Front';\n            nextPage.navText = 'End';\n            nextPage.showNav = true;\n        }\n\n        //We need to refactor this to ONLY update what's needed\n        //We should not be forced to udpate the entire review object.\n        return Object.assign({}, state,{\n            page: nextPage.page,\n            title: nextPage.title,\n            navText: nextPage.navText,\n            showNav:nextPage.showNav,\n            review: {...state.review, \n                cardCounter: state.review.cardCounter + 1, \n                currentCard: newCardIndex, \n                shuffledCardIndices: shuffledCards,\n                endTime: Date.now()\n            }\n        });\n    }\n\n    else if (action.type === actions.WRONG_ANSWER)\n    {\n        //console.log('action = wrongAnswer');\n        \n        //Move our index 1\n        let newCardIndex = state.review.currentCard + 1;\n        if(newCardIndex >= state.review.shuffledCardIndices.length)\n        {\n            //If we go out of bounds, set our index back to 0\n            newCardIndex = 0;\n        }\n\n        const nextPage = {\n            page: 'cardFront',\n            title: 'Front',\n            navText: 'End',\n            showNav: true\n        };\n\n        return Object.assign({}, state, {\n            page: nextPage.page,\n            title: nextPage.title,\n            navText: nextPage.navText,\n            review: {...state.review, \n                cardCounter: state.review.cardCounter + 1, \n                currentCard: newCardIndex, \n            }\n        });\n    }\n\n    //Bring us to our decks page if we return home or login\n    else if (action.type === actions.RETURN_HOME || action.type === actions.LOGIN_SUCCESS)\n    {\n        //console.log('action = returnHome');\n        return Object.assign({}, state, {\n            page: 'decks',\n            title:'Decks',\n            navText: 'logout',\n            showNav: true,\n            loading:false\n        });\n    }\n\n    else if(action.type === actions.LOGIN_REQUEST)\n    {\n        //console.log('action = loginRequest');\n        return Object.assign({}, state, {\n            decks:null,\n            loading:true,\n            loginError:null\n        });\n    }\n\n    else if(action.type === actions.LOGIN_ERROR)\n    {\n        let errorStatus;\n        if(action.err.status === 401)\n        {\n            errorStatus = \"The username or password is incorrect.\";\n        }\n        else{\n            errorStatus = \"Something went wrong. Please try again.\";\n        }\n\n\n        //console.log('action = loginError');\n        return Object.assign({}, state, {\n            loading:false,\n            loginError: errorStatus\n        });\n    }\n\n    else if (action.type === actions.GET_DECKS_SUCCESS)\n    {\n        //console.log('action=getDecksSuccess');\n        //console.log(action.decks);\n        return Object.assign({}, state, {\n            decks: action.decks,\n            loading:false,\n            deckError:false\n        });\n    }\n\n    else if (action.type === actions.GET_DECKS_ERROR)\n    {\n        //console.log('action=getDecksError');\n        //console.log(action.decks);\n        return Object.assign({}, state, {\n            loading:false,\n            deckError:true\n        });\n    }\n\n    else if(action.type === actions.GET_DECKS_REQUEST)\n    {\n        //console.log('action = getDecksRequest');\n        return Object.assign({}, state, {\n            loading:true,\n            deckError:false\n        });\n    }\n\n\n    else if (action.type === actions.PUT_DECKS_REQUEST)\n    {\n        //console.log('action = putDecksRequest');\n        return Object.assign({}, state, {\n            loading:true,\n            reviewError: false\n        });\n    }\n\n    else if(action.type === actions.PUT_DECKS_SUCCESS)\n    {\n        return Object.assign({}, state, {\n            loading:false,\n            reviewError:false\n        });\n    }\n\n    else if(action.type === actions.PUT_DECKS_ERROR)\n    {\n        return Object.assign({}, state, {\n            loading:false,\n            reviewError: true\n        });\n    }\n\n\n    else if (action.type === actions.REGISTER_REQUEST)\n    {\n        //console.log('action = registerRequest');\n        return Object.assign({}, state, {\n            loading:true,\n            registerError:null\n        });\n    }\n\n    else if(action.type === actions.REGISTER_SUCCESS)\n    {\n        return Object.assign({}, state, {\n            loading:false,\n            page:'register-success',\n            title:'Registration Success',\n            registerError:null\n        });\n    }\n\n    else if(action.type === actions.REGISTER_ERROR)\n    {\n        return Object.assign({}, state, {\n            registerError: action.err.message,\n            loading:false,\n        });\n    }\n\n    else if (action.type === actions.HANDLE_NAV)\n    {\n        switch(action.navText.toLowerCase())\n        {\n            case 'logout': \n                //console.log('user logged out');\n                //We need to clear our authToken here\n                return Object.assign({}, state, {\n                    page: 'login',\n                    title:'Weekly Words',\n                    showNav: false,\n                    review: initialState.review\n                });\n            case 'end':\n                return Object.assign({}, state, {\n                    page: 'decks',\n                    title:'Decks',\n                    navText: 'logout',\n                    showNav: true,\n                    review: initialState.review\n                });\n            default:\n                //console.log('Error: Button had no navtext');\n            break;\n\n        }\n    }\n\n    else if (action.type === actions.GO_REGISTER)\n    {\n        return Object.assign({}, state, {\n            page:'register',\n            title:'Register',\n            showNav:false\n        });\n    }\n\n    else if (action.type === actions.GO_LOGIN)\n    {\n        return Object.assign({}, state, {\n            page:'login',\n            title:'Weekly Words',\n            showNav: false\n        });\n    }\n\n    else if (action.type === actions.DISPLAY_HELP)\n    {\n        return Object.assign({}, state, {\n            showHelp: true,\n            showNav: false\n        });\n    }\n\n    else if (action.type === actions.HIDE_HELP)\n    {\n        return Object.assign({}, state, {\n            showHelp: false,\n            showNav: true\n        });\n    }\n\n    //Default\n    return state;\n}\n\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport {weeklyWordsReducer} from './reducers';\nimport {reducer as formReducer} from 'redux-form';\n\nexport default createStore(\n    combineReducers({\n        weeklyWordsReducer,\n        form: formReducer\n    }), \n    applyMiddleware(thunk)\n);","/*Component that contains the title and navigation link*/\n\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport {handleNav} from '../actions';\nimport './header.css';\n\nexport function Header(props)\n{\n    function handleClick()\n    {\n        props.dispatch(handleNav(props.navText));   \n    }\n\n    return (\n        <header className=\"App-header\" role=\"banner\">\n          <h1>{props.title}</h1>\n          {props.showNav && props.navText && <button className=\"nav-button\" onClick={()=>handleClick()}>{props.navText}</button>}\n        </header>\n    );\n};\n\n//fallback if our state fails\nHeader.defaultProps = {\n    title: 'Decks',\n    navText: 'logout'\n};\n\nconst mapStateToProps = state => ({\n    title: state.weeklyWordsReducer.title,\n    navText: state.weeklyWordsReducer.navText,\n    showNav: state.weeklyWordsReducer.showNav\n\n});\n\nexport default connect(mapStateToProps)(Header);","/* Link that contians the Deck name and information about the deck.\n * We will display a drop-down with information when it's clicked. */\nimport React from 'react';\nimport './deck.css';\nimport {connect} from 'react-redux';\nimport { showHideDeckInfo, startReview } from '../actions';\n\nexport function Deck(props)\n{\n    function showHideInfo()\n    {\n        //console.log(`showHideDeckInfo ${props.index}`);\n        props.dispatch(showHideDeckInfo(props.index));\n    }\n\n    function beginReview()\n    {\n        //console.log('start review clicked');\n        props.dispatch(startReview(props.index));\n    }\n\n    return(\n        <div>\n            <button className=\"deck-link\" onClick={()=> showHideInfo()}>{props.deckName}</button>\n            {/* Below is used to display when displayInfo is set to true */}\n            {props.displayInfo && <div className=\"deck-stats\">\n                <ul>\n                    <li><strong>Review Total:</strong> {props.deckReviewTotal}</li>\n                    <li><strong>Latest Accuracy:</strong> {props.deckLatestAccuracy}%</li>\n                    <li><strong>Latest Review Time:</strong> {props.deckLatestTime}s</li>\n                    <br />\n                    <li><strong>Highest Accuracy:</strong> {props.deckHighestAccuracy}%</li>\n                    <li><strong>Fastest Review Time:</strong> {props.deckFastestTime}s</li>\n                </ul>\n                <button className=\"deck-button-start\" onClick={()=>beginReview()}>Start Review</button> \n            </div>}\n        </div>\n    );\n}\n\n//Default deck information\nDeck.defaultProps = {\n    deckName: 'Default Deck Name',\n    deckReviewTotal: 5,\n    deckHighestAccuracy: 85,\n    deckLatestAccuracy: 50,\n    deckFastestTime: 600, //time in seconds\n    deckLatestTime: 1000, //time in seconds\n    displayInfo: false //If true, show our information\n};\n\nexport default connect()(Deck)","/* Component viewed from the Decks page. \n * Contains a list of every deck.\n * Uses fetch to retrieve list of decks.*/\n\nimport React, { Component } from 'react';\nimport Deck from './deck';\n\nimport {connect} from 'react-redux';\nimport {getDecks} from '../actions';\n\nimport './deckList.css';\n\n export class DeckList extends Component\n {\n    componentDidMount()\n    {\n        this.props.dispatch(getDecks());\n    }\n\n\n    \n\n    // Map each deck to a deck component (Note: the spread operator\n    // adds every object key as a prop to the Deck component)\n    // The index prop can be used to uniquely identify this component,\n    // as we are mapping it to the exact indices of the decks array\n    render(){\n        //reverse the map so that we can sort by the latest deck being first\n        let deckComponents;\n        if(this.props.decks)\n        {\n            deckComponents = this.props.decks.slice(0).reverse().map((deck, index) =>\n                \n                <Deck {...deck} key={index} index={this.props.decks.length - 1 - index}/>\n            );\n        }\n\n        const error = (\n            <div className=\"deck-error\">\n                <p>There was an error retrieving decks from the server</p>\n                <button className=\"deck-error-button\" onClick={()=>this.props.dispatch(getDecks())}><i className=\"fas fa-redo-alt\"></i></button>\n            </div>);\n\n        return(\n            <section>\n                {this.props.deckError ? error : deckComponents}\n                {/* {deckComponents} */}\n            </section>\n        );\n    };\n}\n\nconst mapStateToProps = state => ({\n    decks: state.weeklyWordsReducer.decks,\n    deckError: state.weeklyWordsReducer.deckError\n});\n\nexport default connect(mapStateToProps)(DeckList);","//Displays the review word and button to flip card\nimport React from 'react';\nimport './cardFront.css';\nimport {connect} from 'react-redux';\nimport {flipCard} from '../actions';\n\n\nexport function cardFront(props)\n{\n    //Callback for onClick event\n    function flip()\n    {\n        //console.log('flip card called');\n        props.dispatch(flipCard(props.cardIndex));\n    }\n\n    //Word that we are displaying on this card - Need to refactor for readability ^^'\n    const word = props.currentDeck.generatedDeck.cards[props.review.shuffledCardIndices[props.review.currentCard]].word;\n\n    return(\n        <section className =\"card-front\">\n            <h2>{word}</h2>\n            <button onClick={()=>flip()} className=\"cardfront-button-flip\">Flip Over</button>\n        </section>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    review: state.weeklyWordsReducer.review,\n    currentDeck: state.weeklyWordsReducer.decks[state.weeklyWordsReducer.review.deckIndex]\n});\n\nexport default connect(mapStateToProps)(cardFront);","//Displays the review word and button to flip card\nimport React from 'react';\nimport './cardBack.css';\nimport {connect} from 'react-redux';\nimport {rightAnswer, wrongAnswer} from '../actions';\n\n\nexport function CardBack(props)\n{\n    //Store our current card\n    const currentCard = props.currentDeck.generatedDeck.cards[props.review.shuffledCardIndices[props.review.currentCard]];\n\n    //Callback to fire our dispatch when our answer is right\n    function clickedRight()\n    {\n        //console.log(`showHideDeckInfo ${props.index}`);\n        props.dispatch(rightAnswer());\n    }\n\n    function clickedWrong()\n    {\n        props.dispatch(wrongAnswer());\n    }\n\n    return(\n        <section className=\"card-back\">\n            <h2>{currentCard.word}</h2>\n            <div>\n            <p>(<strong>{currentCard.partOfSpeech}</strong>) {currentCard.definition}</p>\n                <p className =\"cardback-usage\">{currentCard.usage}</p>\n            </div>\n            <div className=\"cardback-button-container\">\n                <button className=\"cardback-button-right\" onClick={()=>clickedRight()}><i class=\"fas fa-check\"></i></button>\n                <button className=\"cardback-button-wrong\" onClick={()=>clickedWrong()}><i class=\"fas fa-times\"></i></button>\n            </div>\n        </section>\n    );\n}\n\nCardBack.defaultProps = {\n    word:'example',\n    results: [\n        {\n            partOfSpeech: 'noun',\n            definition: 'a thing characteristic of its kind or illustrating a general rule.',\n            usage: `it's a good example of how European action can produce results`\n        },\n        {\n            partOfSpeech: 'noun',\n            definition: 'a representative form or pattern',\n            usage: `I profited from his example`\n        }\n    ]\n}\n\nconst mapStateToProps = state => ({\n    review: state.weeklyWordsReducer.review,\n    currentDeck: state.weeklyWordsReducer.decks[state.weeklyWordsReducer.review.deckIndex]\n});\n\nexport default connect(mapStateToProps)(CardBack);","//Results page (shown once deck is reviewed)\nimport React, { Component } from 'react';\nimport './results.css';\nimport {connect} from 'react-redux';\nimport {returnHome, startReview, putDeckStats} from '../actions';\n\n\nexport class Results extends Component\n{\n   \n    //Callback to fire our dispatch when our answer is right\n    clickedHome()\n    {\n        //console.log(`showHideDeckInfo ${props.index}`);\n        this.props.dispatch(returnHome());\n    }\n\n    clickedAgain()\n    {\n        //Just restart the review again\n        this.props.dispatch(startReview(this.props.deckIndex));\n    }\n\n    //Calculates our review time in human-readable format\n    calculateElapsedTime()\n    {\n        const milliseconds = this.props.review.endTime - this.props.review.startTime;\n        const seconds = (milliseconds /1000).toFixed(0);\n\n        let time = \"\";\n        if(seconds >= 60)\n        {\n            //First determine number of minutes\n            const totalMinutes = (seconds / 60).toFixed(0);\n            //Determine any seconds left over\n            const totalSeconds = (seconds % 60).toFixed(0);\n\n            time = `${totalMinutes} minutes & ${totalSeconds} seconds`\n        }\n        else{\n            time = `${seconds} seconds`\n        }\n\n        return time;\n    }\n\n    //Calculates our review accuracy\n    calculateAccuracy()\n    {\n        if(this.props.review.cardCounter === 0)\n        {\n            return `Accuracy Invalid`;\n        }\n\n        return (this.props.currentDeck.generatedDeck.cards.length /this.props.review.cardCounter  * 100).toFixed(2);\n    }\n\n    deckStats = {};\n\n    componentDidMount()\n    {\n        const oldAccuracy = this.props.currentDeck.deckHighestAccuracy;\n        const newAccuracy = this.calculateAccuracy();\n        const bestAccuracy = newAccuracy > oldAccuracy ? newAccuracy : oldAccuracy\n\n        const oldTime = this.props.currentDeck.deckFastestTime;\n\n        const milliseconds = this.props.review.endTime - this.props.review.startTime;\n        const seconds = (milliseconds /1000).toFixed(0);\n        const fastestTime = seconds < oldTime || oldTime === 0 ? seconds : oldTime;\n\n        this.deckStats = {\n            id: this.props.currentDeck.id,\n            deckReviewTotal: this.props.currentDeck.deckReviewTotal + 1,\n            deckHighestAccuracy: bestAccuracy,\n            deckFastestTime: fastestTime, \n            deckLatestTime: seconds,\n            deckLatestAccuracy: newAccuracy\n        };\n\n        //console.log('stats to submit');\n        //console.log(this.deckStats);\n\n        //We need to do a put request here to save our stats\n        this.props.dispatch(putDeckStats(this.deckStats));\n    }\n\nrender(){\n\n//reverse the map so that we can sort by the latest deck being first\nlet error = (<div className=\"results-error\">\n                <p>There was an error sending your stats to the server.</p>\n                <button className=\"results-error-button\" onClick={()=>this.props.dispatch(putDeckStats(this.deckStats))}><i className=\"fas fa-redo-alt\"></i></button>\n            </div>);\n\n\n    return(\n        <section className=\"results-container\">\n            <h2>Review Stats</h2>\n            <p><strong>Total Reviews:</strong> {this.props.currentDeck.deckReviewTotal + 1}</p>\n            <p><strong>Review Accuracy:</strong> {this.calculateAccuracy()+'%'}</p>\n            <p><strong>Review Time:</strong> {this.calculateElapsedTime()}</p>\n            {this.props.reviewError && error}\n            <div className=\"results-button-container\">\n                <button className=\"results-button-again\"onClick={()=>this.clickedAgain()}>Again?</button>\n                <button className=\"results-button-home\" onClick={()=>this.clickedHome()}>Home</button>\n            </div>\n        </section>\n    );\n}\n}\n\nconst mapStateToProps = state => ({\n    deckIndex: state.weeklyWordsReducer.review.deckIndex,\n    review: state.weeklyWordsReducer.review,\n    currentDeck: state.weeklyWordsReducer.decks[state.weeklyWordsReducer.review.deckIndex],\n    reviewError: state.weeklyWordsReducer.reviewError\n});\n\nexport default connect(mapStateToProps)(Results);","//Displays the review word and button to flip card\nimport React from 'react';\nimport './login.css';\nimport {reduxForm, Field} from 'redux-form';\nimport {connect} from 'react-redux';\nimport {doLogin, goRegister} from '../actions';\n\nexport function Login(props)\n{\n    function onSubmit(values) {\n        //set login button inactive\n        props.dispatch(doLogin(values));\n    }\n\n    function handleClick()\n    {\n        props.dispatch(goRegister());\n    }\n\n    const errorField = (<span><p>{props.loginError}</p></span>);\n\n    return (\n        <div className=\"login-form\">\n            {props.loginError && errorField}\n            <form onSubmit={props.handleSubmit(values => onSubmit(values))}>\n                <label htmlFor=\"username\">Username</label>\n                <Field name=\"username\" id=\"username\" type=\"text\" component=\"input\" required />\n                <label htmlFor=\"password\">Password</label>\n                <Field name=\"password\" id=\"password\" type=\"password\" component=\"input\" required/>\n                <button type=\"submit\" className=\"login-button\">Login</button>\n            </form>\n            <p>Don't have an account? <button className=\"link-button\" onClick={()=>handleClick()}>Register</button></p>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    loginError: state.weeklyWordsReducer.loginError,\n});\n\nconst connection = connect(mapStateToProps)(Login);\n\nexport default reduxForm({\n    form: 'login'\n})(connection);","import React from 'react';\nimport Spinner from 'react-spinkit';\nimport './loading.css';\n\nexport default function Loading(props)\n{\n    return (\n        <div className=\"loading\">\n            <Spinner name='circle' className=\"loading-spinner\" fadeIn='quarter'/>\n        </div>\n    );\n}","//Check to make sure our passwords match\nexport const passwordsMustMatch = (value, allValues) => \n  value !== allValues.password ? \n    'Passwords do not match' :\n     undefined","import React from 'react';\nimport './register.css';\nimport {reduxForm, Field} from 'redux-form';\nimport {connect} from 'react-redux';\nimport {doRegister, goLogin} from '../actions';\nimport {passwordsMustMatch} from '../formValidation';\n\nexport function Register(props)\n{\n    function onSubmit(values) {\n        //console.log('registered');\n        props.dispatch(doRegister(values));\n    }\n\n    function handleClick()\n    {\n        props.dispatch(goLogin());\n    }\n\n    const renderField = ({\n        input,\n        label,\n        type,\n        meta: { touched, error, warning }\n      }) => (\n        <div>\n          <label>{label}</label>\n          <div>\n            <input {...input} placeholder={label} type={type} />\n            {touched &&\n              ((error && <span>{error}</span>) ||\n                (warning && <span>{warning}</span>))}\n          </div>\n        </div>\n      )\n\n    const error = (<span>Registration Error: {props.registerError}</span>);\n\n    return(\n        \n        <div className=\"register-form\">\n            {props.registerError && error}\n            <form onSubmit={props.handleSubmit(values => onSubmit(values))}>\n                <label htmlFor=\"username\">Username</label>\n                <Field name=\"username\" id=\"username\" type=\"text\" component=\"input\" required />\n                <label htmlFor=\"name\">Name</label>\n                <Field name=\"name\" id=\"name\" type=\"text\" component=\"input\" required />\n                <label htmlFor=\"password\">Password</label>\n                <Field name=\"password\" id=\"password\" type=\"password\" component=\"input\" required/>\n                <label htmlFor=\"con-password\">Confirm Password</label>\n                <Field name=\"con-password\" id=\"con-password\" type=\"password\" component={renderField} validate={[passwordsMustMatch]} required/>\n                <button type=\"submit\" className=\"login-button\">Register</button>\n            </form>\n            <p>Already have an account? <button className=\"link-button\" onClick={()=>handleClick()}>Login</button></p>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    registerError: state.weeklyWordsReducer.registerError,\n});\n\nconst connection = connect(mapStateToProps)(Register);\n\nexport default reduxForm({\n    form: 'register'\n})(connection);","import React from 'react';\nimport {goLogin} from '../actions';\nimport {connect} from 'react-redux';\n\nconst centered = {\n    textAlign:'center'\n};\n\nexport function RegisterSuccess(props)\n{\n        \n    function handleClick()\n    {\n        props.dispatch(goLogin());\n    }\n\n\n    return(\n    <div style={centered}>\n        <h2>Registration was successful.</h2>\n        <p><button className=\"link-button\" onClick={()=>handleClick()}>Back to Login</button></p>\n    </div>)\n}\n\nexport default connect()(RegisterSuccess);","import React from 'react';\nimport './info.css';\n\nimport {connect} from 'react-redux';\nimport {hideHelp} from '../actions';\n\nexport function Info(props)\n{\n    function handleClick()\n    {\n        props.dispatch(hideHelp());\n    }\n\n    return (\n        <section className=\"info\">\n            <div className=\"info-container\">\n            <h2>Help</h2>\n                <p><strong>Purpose: </strong>Weekly Words is an app designed to help you learn 20 new words or phrases a week. \n                The server will fetch and generate a deck of 20 cards a week to review. </p>\n                <p>Your review stats for each deck are stored to help you monitor your progress.</p>\n                <p>Once you have logged in, you may select a deck from the list. The decks are ordered by the most recent \n                    being at the top of the deck list. It will randomly shuffle the deck and present you with the first\n                    flash card. Answer honestly when you flip the card over. Once you have gotten all 20 cards correct,\n                    your results will be displayed at the end.\n                </p>\n                <p>Sample Username: <strong>Thinkful</strong></p>\n                <p>Sample Password: <strong>p123456789</strong></p>\n                <button onClick={()=>handleClick()}>Hide Help</button>\n            </div>\n        </section>\n    );\n}\n\nexport default connect()(Info);","/* Component that contains and switches between content (similar to a page) \n * between the header and footer. It will draw/contain most of the app's \n * core functionality. */\nimport React from 'react';\nimport './mainContent.css';\nimport {connect} from 'react-redux';\n\n//Imports regarding main content\nimport DeckList from './deckList';\nimport CardFront from './cardFront';\nimport CardBack from './cardBack';\nimport Results from './results';\nimport Login from './login';\nimport Loading from './loading';\nimport Register from './register';\nimport RegisterSuccess from './registerSuccess';\nimport Info from \"./info\";\n\n//We use the page prop in order to change the content.\n//This will not work with the back button, but we are\n//designing this application as if it were a native-mobile one\nexport function MainContent(props)\n{\n    return(\n        <main role=\"main\">\n            {props.loading && <Loading/>}\n            {props.showHelp && <Info/>}\n            {props.page === 'decks' && <DeckList />}\n            {props.page === 'cardFront' && <CardFront />}\n            {props.page === 'cardBack' && <CardBack />}\n            {props.page === 'results' && <Results />}\n            {props.page === 'login' && <Login/>}\n            {props.page === 'register' && <Register/>}\n            {props.page === 'register-success' && <RegisterSuccess/>}\n        </main>\n    );\n};\n\nconst mapStateToProps = state => ({\n    page: state.weeklyWordsReducer.page,\n    loading: state.weeklyWordsReducer.loading,\n    showHelp: state.weeklyWordsReducer.showHelp\n});\n\nexport default connect(mapStateToProps)(MainContent);","/* This component is the footer for the application (it should stay at the bottom of the\n * application. We will update the text in it with different things depending on what the\n * user is currently doing (such as progress on the review).*/\nimport React from 'react';\nimport './footer.css';\n\nimport {connect} from 'react-redux';\n\nimport {displayHelp} from '../actions';\n\nexport  function Footer(props)\n{\n    function handleClick()\n    {\n        props.dispatch(displayHelp());\n    }\n\n    return(\n        <footer role=\"contentinfo\">\n            {/* {props.text} */}\n            <button className=\"link-button\" onClick={()=>handleClick()}>Need Help?</button>\n        </footer>\n    );\n};\n\nFooter.defaultProps =\n{\n    text: \"Need Help?\"\n};\n\nexport default connect()(Footer);","/* Layout/container for Weekly Words application */\nimport React, { Component } from 'react';\nimport './weeklyWords.css';\n\nimport Header from './header';\nimport MainContent from './mainContent';\nimport Footer from './footer';\n\nclass WeeklyWords extends Component {\n  render() {\n    return (\n      <div className=\"Container\">\n        <Header />\n        <MainContent />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default WeeklyWords;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport WeeklyWords from './components/weeklyWords';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <WeeklyWords />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n    PORT: process.env.PORT || 8080,\n    // other stuff\n    API_BASE_URL: process.env.REACT_APP_API_BASE_URL ||\n      \"http://localhost:8083/ww/api\"\n  };"],"sourceRoot":""}